"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Cats example
 * The cats API description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StoresApi = exports.StoresApiFactory = exports.StoresApiFp = exports.StoresApiAxiosParamCreator = exports.PermissionsApi = exports.PermissionsApiFactory = exports.PermissionsApiFp = exports.PermissionsApiAxiosParamCreator = exports.OrganizationsApi = exports.OrganizationsApiFactory = exports.OrganizationsApiFp = exports.OrganizationsApiAxiosParamCreator = exports.MarketplaceApi = exports.MarketplaceApiFactory = exports.MarketplaceApiFp = exports.MarketplaceApiAxiosParamCreator = exports.DefaultApi = exports.DefaultApiFactory = exports.DefaultApiFp = exports.DefaultApiAxiosParamCreator = exports.BrandsApi = exports.BrandsApiFactory = exports.BrandsApiFp = exports.BrandsApiAxiosParamCreator = exports.AuthApi = exports.AuthApiFactory = exports.AuthApiFp = exports.AuthApiAxiosParamCreator = exports.StoreControllerListStores200ResponseSortOptionsEnum = exports.StoreControllerCreateStore201ResponseStatusEnum = exports.PermissionControllerListPermissions200ResponseSortOptionsEnum = exports.OrganizationControllerListOrganizations200ResponseSortOptionsEnum = exports.OrganizationControllerCreateOrganization201ResponseStatusEnum = exports.MarketplaceControllerSearchCategory200ResponseSortOptionsEnum = exports.MarketplaceControllerListMarketplaces200ResponseSortOptionsEnum = exports.MarketplaceControllerGetCategoryAttributes200ResponseSortOptionsEnum = exports.ListResponseDtoSortOptionsEnum = exports.CreateResponseDtoStatusEnum = exports.BrandsControllerListPermissions200ResponseSortOptionsEnum = exports.BrandsControllerCreatePermission201ResponseStatusEnum = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
exports.BrandsControllerCreatePermission201ResponseStatusEnum = {
    Success: 'success',
    Error: 'error'
};
exports.BrandsControllerListPermissions200ResponseSortOptionsEnum = {
    Desc: 'desc',
    Asc: 'asc'
};
exports.CreateResponseDtoStatusEnum = {
    Success: 'success',
    Error: 'error'
};
exports.ListResponseDtoSortOptionsEnum = {
    Desc: 'desc',
    Asc: 'asc'
};
exports.MarketplaceControllerGetCategoryAttributes200ResponseSortOptionsEnum = {
    Desc: 'desc',
    Asc: 'asc'
};
exports.MarketplaceControllerListMarketplaces200ResponseSortOptionsEnum = {
    Desc: 'desc',
    Asc: 'asc'
};
exports.MarketplaceControllerSearchCategory200ResponseSortOptionsEnum = {
    Desc: 'desc',
    Asc: 'asc'
};
exports.OrganizationControllerCreateOrganization201ResponseStatusEnum = {
    Success: 'success',
    Error: 'error'
};
exports.OrganizationControllerListOrganizations200ResponseSortOptionsEnum = {
    Desc: 'desc',
    Asc: 'asc'
};
exports.PermissionControllerListPermissions200ResponseSortOptionsEnum = {
    Desc: 'desc',
    Asc: 'asc'
};
exports.StoreControllerCreateStore201ResponseStatusEnum = {
    Success: 'success',
    Error: 'error'
};
exports.StoreControllerListStores200ResponseSortOptionsEnum = {
    Desc: 'desc',
    Asc: 'asc'
};
/**
 * AuthApi - axios parameter creator
 * @export
 */
const AuthApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary change password
         * @param {ChangePasswordDto} changePasswordDto
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerChangePassword: async (changePasswordDto, authorization, options = {}) => {
            // verify required parameter 'changePasswordDto' is not null or undefined
            (0, common_1.assertParamExists)('authControllerChangePassword', 'changePasswordDto', changePasswordDto);
            const localVarPath = `/auth/change-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization != null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(changePasswordDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary user login
         * @param {LoginDto} loginDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin: async (loginDto, options = {}) => {
            // verify required parameter 'loginDto' is not null or undefined
            (0, common_1.assertParamExists)('authControllerLogin', 'loginDto', loginDto);
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(loginDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary get user info
         * @param {string} token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerMe: async (token, options = {}) => {
            // verify required parameter 'token' is not null or undefined
            (0, common_1.assertParamExists)('authControllerMe', 'token', token);
            const localVarPath = `/auth/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRefresh: async (options = {}) => {
            const localVarPath = `/auth/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary user register
         * @param {RegisterDto} registerDto
         * @param {string} [inv]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRegister: async (registerDto, inv, options = {}) => {
            // verify required parameter 'registerDto' is not null or undefined
            (0, common_1.assertParamExists)('authControllerRegister', 'registerDto', registerDto);
            const localVarPath = `/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (inv !== undefined) {
                localVarQueryParameter['inv'] = inv;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(registerDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary resend verification mail
         * @param {string} authorization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerResendVerification: async (authorization, options = {}) => {
            // verify required parameter 'authorization' is not null or undefined
            (0, common_1.assertParamExists)('authControllerResendVerification', 'authorization', authorization);
            const localVarPath = `/auth/resend-verification`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization != null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary send reset password mail
         * @param {ResetPasswordDto} resetPasswordDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerResetPassword: async (resetPasswordDto, options = {}) => {
            // verify required parameter 'resetPasswordDto' is not null or undefined
            (0, common_1.assertParamExists)('authControllerResetPassword', 'resetPasswordDto', resetPasswordDto);
            const localVarPath = `/auth/reset-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(resetPasswordDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Note: All parameters in this endpoint can be filled optionally, but if there is an authorization header, it should be sent with the body validationCode, otherwise with the token.
         * @summary verify email
         * @param {VerifyEmailDto} verifyEmailDto
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerVerifyEmail: async (verifyEmailDto, authorization, options = {}) => {
            // verify required parameter 'verifyEmailDto' is not null or undefined
            (0, common_1.assertParamExists)('authControllerVerifyEmail', 'verifyEmailDto', verifyEmailDto);
            const localVarPath = `/auth/verify-email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization != null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(verifyEmailDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.AuthApiAxiosParamCreator = AuthApiAxiosParamCreator;
/**
 * AuthApi - functional programming interface
 * @export
 */
const AuthApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.AuthApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary change password
         * @param {ChangePasswordDto} changePasswordDto
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerChangePassword(changePasswordDto, authorization, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerChangePassword(changePasswordDto, authorization, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = base_1.operationServerMap['AuthApi.authControllerChangePassword']?.[index]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         *
         * @summary user login
         * @param {LoginDto} loginDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerLogin(loginDto, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerLogin(loginDto, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = base_1.operationServerMap['AuthApi.authControllerLogin']?.[index]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         *
         * @summary get user info
         * @param {string} token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerMe(token, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerMe(token, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = base_1.operationServerMap['AuthApi.authControllerMe']?.[index]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerRefresh(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerRefresh(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = base_1.operationServerMap['AuthApi.authControllerRefresh']?.[index]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         *
         * @summary user register
         * @param {RegisterDto} registerDto
         * @param {string} [inv]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerRegister(registerDto, inv, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerRegister(registerDto, inv, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = base_1.operationServerMap['AuthApi.authControllerRegister']?.[index]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         *
         * @summary resend verification mail
         * @param {string} authorization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerResendVerification(authorization, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerResendVerification(authorization, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = base_1.operationServerMap['AuthApi.authControllerResendVerification']?.[index]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         *
         * @summary send reset password mail
         * @param {ResetPasswordDto} resetPasswordDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerResetPassword(resetPasswordDto, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerResetPassword(resetPasswordDto, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = base_1.operationServerMap['AuthApi.authControllerResetPassword']?.[index]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Note: All parameters in this endpoint can be filled optionally, but if there is an authorization header, it should be sent with the body validationCode, otherwise with the token.
         * @summary verify email
         * @param {VerifyEmailDto} verifyEmailDto
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerVerifyEmail(verifyEmailDto, authorization, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerVerifyEmail(verifyEmailDto, authorization, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = base_1.operationServerMap['AuthApi.authControllerVerifyEmail']?.[index]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    };
};
exports.AuthApiFp = AuthApiFp;
/**
 * AuthApi - factory interface
 * @export
 */
const AuthApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.AuthApiFp)(configuration);
    return {
        /**
         *
         * @summary change password
         * @param {ChangePasswordDto} changePasswordDto
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerChangePassword(changePasswordDto, authorization, options) {
            return localVarFp.authControllerChangePassword(changePasswordDto, authorization, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary user login
         * @param {LoginDto} loginDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin(loginDto, options) {
            return localVarFp.authControllerLogin(loginDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary get user info
         * @param {string} token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerMe(token, options) {
            return localVarFp.authControllerMe(token, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRefresh(options) {
            return localVarFp.authControllerRefresh(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary user register
         * @param {RegisterDto} registerDto
         * @param {string} [inv]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRegister(registerDto, inv, options) {
            return localVarFp.authControllerRegister(registerDto, inv, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary resend verification mail
         * @param {string} authorization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerResendVerification(authorization, options) {
            return localVarFp.authControllerResendVerification(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary send reset password mail
         * @param {ResetPasswordDto} resetPasswordDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerResetPassword(resetPasswordDto, options) {
            return localVarFp.authControllerResetPassword(resetPasswordDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Note: All parameters in this endpoint can be filled optionally, but if there is an authorization header, it should be sent with the body validationCode, otherwise with the token.
         * @summary verify email
         * @param {VerifyEmailDto} verifyEmailDto
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerVerifyEmail(verifyEmailDto, authorization, options) {
            return localVarFp.authControllerVerifyEmail(verifyEmailDto, authorization, options).then((request) => request(axios, basePath));
        },
    };
};
exports.AuthApiFactory = AuthApiFactory;
/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
class AuthApi extends base_1.BaseAPI {
    /**
     *
     * @summary change password
     * @param {ChangePasswordDto} changePasswordDto
     * @param {string} [authorization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerChangePassword(changePasswordDto, authorization, options) {
        return (0, exports.AuthApiFp)(this.configuration).authControllerChangePassword(changePasswordDto, authorization, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary user login
     * @param {LoginDto} loginDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerLogin(loginDto, options) {
        return (0, exports.AuthApiFp)(this.configuration).authControllerLogin(loginDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary get user info
     * @param {string} token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerMe(token, options) {
        return (0, exports.AuthApiFp)(this.configuration).authControllerMe(token, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerRefresh(options) {
        return (0, exports.AuthApiFp)(this.configuration).authControllerRefresh(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary user register
     * @param {RegisterDto} registerDto
     * @param {string} [inv]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerRegister(registerDto, inv, options) {
        return (0, exports.AuthApiFp)(this.configuration).authControllerRegister(registerDto, inv, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary resend verification mail
     * @param {string} authorization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerResendVerification(authorization, options) {
        return (0, exports.AuthApiFp)(this.configuration).authControllerResendVerification(authorization, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary send reset password mail
     * @param {ResetPasswordDto} resetPasswordDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerResetPassword(resetPasswordDto, options) {
        return (0, exports.AuthApiFp)(this.configuration).authControllerResetPassword(resetPasswordDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Note: All parameters in this endpoint can be filled optionally, but if there is an authorization header, it should be sent with the body validationCode, otherwise with the token.
     * @summary verify email
     * @param {VerifyEmailDto} verifyEmailDto
     * @param {string} [authorization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authControllerVerifyEmail(verifyEmailDto, authorization, options) {
        return (0, exports.AuthApiFp)(this.configuration).authControllerVerifyEmail(verifyEmailDto, authorization, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.AuthApi = AuthApi;
/**
 * BrandsApi - axios parameter creator
 * @export
 */
const BrandsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary create Brand
         * @param {string} authorization JWT Token
         * @param {CreateBrandDto} createBrandDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brandsControllerCreatePermission: async (authorization, createBrandDto, options = {}) => {
            // verify required parameter 'authorization' is not null or undefined
            (0, common_1.assertParamExists)('brandsControllerCreatePermission', 'authorization', authorization);
            // verify required parameter 'createBrandDto' is not null or undefined
            (0, common_1.assertParamExists)('brandsControllerCreatePermission', 'createBrandDto', createBrandDto);
            const localVarPath = `/brands`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization != null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createBrandDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary list Brands
         * @param {string} authorization JWT Token
         * @param {number} [limit]
         * @param {number} [page]
         * @param {string} [orderBy]
         * @param {boolean} [desc]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brandsControllerListPermissions: async (authorization, limit, page, orderBy, desc, options = {}) => {
            // verify required parameter 'authorization' is not null or undefined
            (0, common_1.assertParamExists)('brandsControllerListPermissions', 'authorization', authorization);
            const localVarPath = `/brands`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }
            if (desc !== undefined) {
                localVarQueryParameter['desc'] = desc;
            }
            if (authorization != null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.BrandsApiAxiosParamCreator = BrandsApiAxiosParamCreator;
/**
 * BrandsApi - functional programming interface
 * @export
 */
const BrandsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.BrandsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary create Brand
         * @param {string} authorization JWT Token
         * @param {CreateBrandDto} createBrandDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async brandsControllerCreatePermission(authorization, createBrandDto, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.brandsControllerCreatePermission(authorization, createBrandDto, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = base_1.operationServerMap['BrandsApi.brandsControllerCreatePermission']?.[index]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         *
         * @summary list Brands
         * @param {string} authorization JWT Token
         * @param {number} [limit]
         * @param {number} [page]
         * @param {string} [orderBy]
         * @param {boolean} [desc]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async brandsControllerListPermissions(authorization, limit, page, orderBy, desc, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.brandsControllerListPermissions(authorization, limit, page, orderBy, desc, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = base_1.operationServerMap['BrandsApi.brandsControllerListPermissions']?.[index]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    };
};
exports.BrandsApiFp = BrandsApiFp;
/**
 * BrandsApi - factory interface
 * @export
 */
const BrandsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.BrandsApiFp)(configuration);
    return {
        /**
         *
         * @summary create Brand
         * @param {string} authorization JWT Token
         * @param {CreateBrandDto} createBrandDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brandsControllerCreatePermission(authorization, createBrandDto, options) {
            return localVarFp.brandsControllerCreatePermission(authorization, createBrandDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary list Brands
         * @param {string} authorization JWT Token
         * @param {number} [limit]
         * @param {number} [page]
         * @param {string} [orderBy]
         * @param {boolean} [desc]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brandsControllerListPermissions(authorization, limit, page, orderBy, desc, options) {
            return localVarFp.brandsControllerListPermissions(authorization, limit, page, orderBy, desc, options).then((request) => request(axios, basePath));
        },
    };
};
exports.BrandsApiFactory = BrandsApiFactory;
/**
 * BrandsApi - object-oriented interface
 * @export
 * @class BrandsApi
 * @extends {BaseAPI}
 */
class BrandsApi extends base_1.BaseAPI {
    /**
     *
     * @summary create Brand
     * @param {string} authorization JWT Token
     * @param {CreateBrandDto} createBrandDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandsApi
     */
    brandsControllerCreatePermission(authorization, createBrandDto, options) {
        return (0, exports.BrandsApiFp)(this.configuration).brandsControllerCreatePermission(authorization, createBrandDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary list Brands
     * @param {string} authorization JWT Token
     * @param {number} [limit]
     * @param {number} [page]
     * @param {string} [orderBy]
     * @param {boolean} [desc]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandsApi
     */
    brandsControllerListPermissions(authorization, limit, page, orderBy, desc, options) {
        return (0, exports.BrandsApiFp)(this.configuration).brandsControllerListPermissions(authorization, limit, page, orderBy, desc, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.BrandsApi = BrandsApi;
/**
 * DefaultApi - axios parameter creator
 * @export
 */
const DefaultApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheckControllerGetHealthCheck: async (options = {}) => {
            const localVarPath = `/health-check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.DefaultApiAxiosParamCreator = DefaultApiAxiosParamCreator;
/**
 * DefaultApi - functional programming interface
 * @export
 */
const DefaultApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.DefaultApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthCheckControllerGetHealthCheck(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthCheckControllerGetHealthCheck(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = base_1.operationServerMap['DefaultApi.healthCheckControllerGetHealthCheck']?.[index]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    };
};
exports.DefaultApiFp = DefaultApiFp;
/**
 * DefaultApi - factory interface
 * @export
 */
const DefaultApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.DefaultApiFp)(configuration);
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheckControllerGetHealthCheck(options) {
            return localVarFp.healthCheckControllerGetHealthCheck(options).then((request) => request(axios, basePath));
        },
    };
};
exports.DefaultApiFactory = DefaultApiFactory;
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
class DefaultApi extends base_1.BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    healthCheckControllerGetHealthCheck(options) {
        return (0, exports.DefaultApiFp)(this.configuration).healthCheckControllerGetHealthCheck(options).then((request) => request(this.axios, this.basePath));
    }
}
exports.DefaultApi = DefaultApi;
/**
 * MarketplaceApi - axios parameter creator
 * @export
 */
const MarketplaceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary list Attributes
         * @param {string} marketplace
         * @param {string} category
         * @param {string} authorization JWT Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketplaceControllerGetCategoryAttributes: async (marketplace, category, authorization, options = {}) => {
            // verify required parameter 'marketplace' is not null or undefined
            (0, common_1.assertParamExists)('marketplaceControllerGetCategoryAttributes', 'marketplace', marketplace);
            // verify required parameter 'category' is not null or undefined
            (0, common_1.assertParamExists)('marketplaceControllerGetCategoryAttributes', 'category', category);
            // verify required parameter 'authorization' is not null or undefined
            (0, common_1.assertParamExists)('marketplaceControllerGetCategoryAttributes', 'authorization', authorization);
            const localVarPath = `/marketplaces/{marketplace}/categories/{category}/attributes`
                .replace(`{${'marketplace'}}`, encodeURIComponent(String(marketplace)))
                .replace(`{${'category'}}`, encodeURIComponent(String(category)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization != null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary list MarketPlaces
         * @param {string} authorization JWT Token
         * @param {number} [limit]
         * @param {number} [page]
         * @param {string} [orderBy]
         * @param {boolean} [desc]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketplaceControllerListMarketplaces: async (authorization, limit, page, orderBy, desc, options = {}) => {
            // verify required parameter 'authorization' is not null or undefined
            (0, common_1.assertParamExists)('marketplaceControllerListMarketplaces', 'authorization', authorization);
            const localVarPath = `/marketplaces`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }
            if (desc !== undefined) {
                localVarQueryParameter['desc'] = desc;
            }
            if (authorization != null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary list Categories
         * @param {string} marketplace
         * @param {string} search
         * @param {string} authorization JWT Token
         * @param {number} [limit]
         * @param {number} [page]
         * @param {string} [orderBy]
         * @param {boolean} [desc]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketplaceControllerSearchCategory: async (marketplace, search, authorization, limit, page, orderBy, desc, options = {}) => {
            // verify required parameter 'marketplace' is not null or undefined
            (0, common_1.assertParamExists)('marketplaceControllerSearchCategory', 'marketplace', marketplace);
            // verify required parameter 'search' is not null or undefined
            (0, common_1.assertParamExists)('marketplaceControllerSearchCategory', 'search', search);
            // verify required parameter 'authorization' is not null or undefined
            (0, common_1.assertParamExists)('marketplaceControllerSearchCategory', 'authorization', authorization);
            const localVarPath = `/marketplaces/{marketplace}/categories`.replace(`{${'marketplace'}}`, encodeURIComponent(String(marketplace)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }
            if (desc !== undefined) {
                localVarQueryParameter['desc'] = desc;
            }
            if (authorization != null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.MarketplaceApiAxiosParamCreator = MarketplaceApiAxiosParamCreator;
/**
 * MarketplaceApi - functional programming interface
 * @export
 */
const MarketplaceApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.MarketplaceApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary list Attributes
         * @param {string} marketplace
         * @param {string} category
         * @param {string} authorization JWT Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marketplaceControllerGetCategoryAttributes(marketplace, category, authorization, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marketplaceControllerGetCategoryAttributes(marketplace, category, authorization, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = base_1.operationServerMap['MarketplaceApi.marketplaceControllerGetCategoryAttributes']?.[index]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         *
         * @summary list MarketPlaces
         * @param {string} authorization JWT Token
         * @param {number} [limit]
         * @param {number} [page]
         * @param {string} [orderBy]
         * @param {boolean} [desc]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marketplaceControllerListMarketplaces(authorization, limit, page, orderBy, desc, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marketplaceControllerListMarketplaces(authorization, limit, page, orderBy, desc, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = base_1.operationServerMap['MarketplaceApi.marketplaceControllerListMarketplaces']?.[index]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         *
         * @summary list Categories
         * @param {string} marketplace
         * @param {string} search
         * @param {string} authorization JWT Token
         * @param {number} [limit]
         * @param {number} [page]
         * @param {string} [orderBy]
         * @param {boolean} [desc]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marketplaceControllerSearchCategory(marketplace, search, authorization, limit, page, orderBy, desc, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marketplaceControllerSearchCategory(marketplace, search, authorization, limit, page, orderBy, desc, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = base_1.operationServerMap['MarketplaceApi.marketplaceControllerSearchCategory']?.[index]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    };
};
exports.MarketplaceApiFp = MarketplaceApiFp;
/**
 * MarketplaceApi - factory interface
 * @export
 */
const MarketplaceApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.MarketplaceApiFp)(configuration);
    return {
        /**
         *
         * @summary list Attributes
         * @param {string} marketplace
         * @param {string} category
         * @param {string} authorization JWT Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketplaceControllerGetCategoryAttributes(marketplace, category, authorization, options) {
            return localVarFp
                .marketplaceControllerGetCategoryAttributes(marketplace, category, authorization, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary list MarketPlaces
         * @param {string} authorization JWT Token
         * @param {number} [limit]
         * @param {number} [page]
         * @param {string} [orderBy]
         * @param {boolean} [desc]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketplaceControllerListMarketplaces(authorization, limit, page, orderBy, desc, options) {
            return localVarFp
                .marketplaceControllerListMarketplaces(authorization, limit, page, orderBy, desc, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary list Categories
         * @param {string} marketplace
         * @param {string} search
         * @param {string} authorization JWT Token
         * @param {number} [limit]
         * @param {number} [page]
         * @param {string} [orderBy]
         * @param {boolean} [desc]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketplaceControllerSearchCategory(marketplace, search, authorization, limit, page, orderBy, desc, options) {
            return localVarFp
                .marketplaceControllerSearchCategory(marketplace, search, authorization, limit, page, orderBy, desc, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.MarketplaceApiFactory = MarketplaceApiFactory;
/**
 * MarketplaceApi - object-oriented interface
 * @export
 * @class MarketplaceApi
 * @extends {BaseAPI}
 */
class MarketplaceApi extends base_1.BaseAPI {
    /**
     *
     * @summary list Attributes
     * @param {string} marketplace
     * @param {string} category
     * @param {string} authorization JWT Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketplaceApi
     */
    marketplaceControllerGetCategoryAttributes(marketplace, category, authorization, options) {
        return (0, exports.MarketplaceApiFp)(this.configuration)
            .marketplaceControllerGetCategoryAttributes(marketplace, category, authorization, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary list MarketPlaces
     * @param {string} authorization JWT Token
     * @param {number} [limit]
     * @param {number} [page]
     * @param {string} [orderBy]
     * @param {boolean} [desc]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketplaceApi
     */
    marketplaceControllerListMarketplaces(authorization, limit, page, orderBy, desc, options) {
        return (0, exports.MarketplaceApiFp)(this.configuration)
            .marketplaceControllerListMarketplaces(authorization, limit, page, orderBy, desc, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary list Categories
     * @param {string} marketplace
     * @param {string} search
     * @param {string} authorization JWT Token
     * @param {number} [limit]
     * @param {number} [page]
     * @param {string} [orderBy]
     * @param {boolean} [desc]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketplaceApi
     */
    marketplaceControllerSearchCategory(marketplace, search, authorization, limit, page, orderBy, desc, options) {
        return (0, exports.MarketplaceApiFp)(this.configuration)
            .marketplaceControllerSearchCategory(marketplace, search, authorization, limit, page, orderBy, desc, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.MarketplaceApi = MarketplaceApi;
/**
 * OrganizationsApi - axios parameter creator
 * @export
 */
const OrganizationsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary create Organization
         * @param {string} authorization JWT Token
         * @param {CreateOrganizationDto} createOrganizationDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organizationControllerCreateOrganization: async (authorization, createOrganizationDto, options = {}) => {
            // verify required parameter 'authorization' is not null or undefined
            (0, common_1.assertParamExists)('organizationControllerCreateOrganization', 'authorization', authorization);
            // verify required parameter 'createOrganizationDto' is not null or undefined
            (0, common_1.assertParamExists)('organizationControllerCreateOrganization', 'createOrganizationDto', createOrganizationDto);
            const localVarPath = `/organizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization != null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createOrganizationDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary list Organizations
         * @param {string} authorization JWT Token
         * @param {number} [limit]
         * @param {number} [page]
         * @param {string} [orderBy]
         * @param {boolean} [desc]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organizationControllerListOrganizations: async (authorization, limit, page, orderBy, desc, options = {}) => {
            // verify required parameter 'authorization' is not null or undefined
            (0, common_1.assertParamExists)('organizationControllerListOrganizations', 'authorization', authorization);
            const localVarPath = `/organizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }
            if (desc !== undefined) {
                localVarQueryParameter['desc'] = desc;
            }
            if (authorization != null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.OrganizationsApiAxiosParamCreator = OrganizationsApiAxiosParamCreator;
/**
 * OrganizationsApi - functional programming interface
 * @export
 */
const OrganizationsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.OrganizationsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary create Organization
         * @param {string} authorization JWT Token
         * @param {CreateOrganizationDto} createOrganizationDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async organizationControllerCreateOrganization(authorization, createOrganizationDto, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.organizationControllerCreateOrganization(authorization, createOrganizationDto, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = base_1.operationServerMap['OrganizationsApi.organizationControllerCreateOrganization']?.[index]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         *
         * @summary list Organizations
         * @param {string} authorization JWT Token
         * @param {number} [limit]
         * @param {number} [page]
         * @param {string} [orderBy]
         * @param {boolean} [desc]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async organizationControllerListOrganizations(authorization, limit, page, orderBy, desc, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.organizationControllerListOrganizations(authorization, limit, page, orderBy, desc, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = base_1.operationServerMap['OrganizationsApi.organizationControllerListOrganizations']?.[index]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    };
};
exports.OrganizationsApiFp = OrganizationsApiFp;
/**
 * OrganizationsApi - factory interface
 * @export
 */
const OrganizationsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.OrganizationsApiFp)(configuration);
    return {
        /**
         *
         * @summary create Organization
         * @param {string} authorization JWT Token
         * @param {CreateOrganizationDto} createOrganizationDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organizationControllerCreateOrganization(authorization, createOrganizationDto, options) {
            return localVarFp.organizationControllerCreateOrganization(authorization, createOrganizationDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary list Organizations
         * @param {string} authorization JWT Token
         * @param {number} [limit]
         * @param {number} [page]
         * @param {string} [orderBy]
         * @param {boolean} [desc]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organizationControllerListOrganizations(authorization, limit, page, orderBy, desc, options) {
            return localVarFp.organizationControllerListOrganizations(authorization, limit, page, orderBy, desc, options).then((request) => request(axios, basePath));
        },
    };
};
exports.OrganizationsApiFactory = OrganizationsApiFactory;
/**
 * OrganizationsApi - object-oriented interface
 * @export
 * @class OrganizationsApi
 * @extends {BaseAPI}
 */
class OrganizationsApi extends base_1.BaseAPI {
    /**
     *
     * @summary create Organization
     * @param {string} authorization JWT Token
     * @param {CreateOrganizationDto} createOrganizationDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    organizationControllerCreateOrganization(authorization, createOrganizationDto, options) {
        return (0, exports.OrganizationsApiFp)(this.configuration).organizationControllerCreateOrganization(authorization, createOrganizationDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary list Organizations
     * @param {string} authorization JWT Token
     * @param {number} [limit]
     * @param {number} [page]
     * @param {string} [orderBy]
     * @param {boolean} [desc]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    organizationControllerListOrganizations(authorization, limit, page, orderBy, desc, options) {
        return (0, exports.OrganizationsApiFp)(this.configuration).organizationControllerListOrganizations(authorization, limit, page, orderBy, desc, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.OrganizationsApi = OrganizationsApi;
/**
 * PermissionsApi - axios parameter creator
 * @export
 */
const PermissionsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary list Permissions
         * @param {string} authorization JWT Token
         * @param {string} [search]
         * @param {number} [limit]
         * @param {number} [page]
         * @param {string} [orderBy]
         * @param {boolean} [desc]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permissionControllerListPermissions: async (authorization, search, limit, page, orderBy, desc, options = {}) => {
            // verify required parameter 'authorization' is not null or undefined
            (0, common_1.assertParamExists)('permissionControllerListPermissions', 'authorization', authorization);
            const localVarPath = `/permissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }
            if (desc !== undefined) {
                localVarQueryParameter['desc'] = desc;
            }
            if (authorization != null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.PermissionsApiAxiosParamCreator = PermissionsApiAxiosParamCreator;
/**
 * PermissionsApi - functional programming interface
 * @export
 */
const PermissionsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.PermissionsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary list Permissions
         * @param {string} authorization JWT Token
         * @param {string} [search]
         * @param {number} [limit]
         * @param {number} [page]
         * @param {string} [orderBy]
         * @param {boolean} [desc]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async permissionControllerListPermissions(authorization, search, limit, page, orderBy, desc, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.permissionControllerListPermissions(authorization, search, limit, page, orderBy, desc, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = base_1.operationServerMap['PermissionsApi.permissionControllerListPermissions']?.[index]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    };
};
exports.PermissionsApiFp = PermissionsApiFp;
/**
 * PermissionsApi - factory interface
 * @export
 */
const PermissionsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.PermissionsApiFp)(configuration);
    return {
        /**
         *
         * @summary list Permissions
         * @param {string} authorization JWT Token
         * @param {string} [search]
         * @param {number} [limit]
         * @param {number} [page]
         * @param {string} [orderBy]
         * @param {boolean} [desc]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        permissionControllerListPermissions(authorization, search, limit, page, orderBy, desc, options) {
            return localVarFp.permissionControllerListPermissions(authorization, search, limit, page, orderBy, desc, options).then((request) => request(axios, basePath));
        },
    };
};
exports.PermissionsApiFactory = PermissionsApiFactory;
/**
 * PermissionsApi - object-oriented interface
 * @export
 * @class PermissionsApi
 * @extends {BaseAPI}
 */
class PermissionsApi extends base_1.BaseAPI {
    /**
     *
     * @summary list Permissions
     * @param {string} authorization JWT Token
     * @param {string} [search]
     * @param {number} [limit]
     * @param {number} [page]
     * @param {string} [orderBy]
     * @param {boolean} [desc]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    permissionControllerListPermissions(authorization, search, limit, page, orderBy, desc, options) {
        return (0, exports.PermissionsApiFp)(this.configuration).permissionControllerListPermissions(authorization, search, limit, page, orderBy, desc, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.PermissionsApi = PermissionsApi;
/**
 * StoresApi - axios parameter creator
 * @export
 */
const StoresApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary create Store
         * @param {string} authorization JWT Token
         * @param {CreateStoreDto} createStoreDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerCreateStore: async (authorization, createStoreDto, options = {}) => {
            // verify required parameter 'authorization' is not null or undefined
            (0, common_1.assertParamExists)('storeControllerCreateStore', 'authorization', authorization);
            // verify required parameter 'createStoreDto' is not null or undefined
            (0, common_1.assertParamExists)('storeControllerCreateStore', 'createStoreDto', createStoreDto);
            const localVarPath = `/stores`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization != null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createStoreDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary list Stores
         * @param {string} authorization JWT Token
         * @param {number} [limit]
         * @param {number} [page]
         * @param {string} [orderBy]
         * @param {boolean} [desc]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerListStores: async (authorization, limit, page, orderBy, desc, options = {}) => {
            // verify required parameter 'authorization' is not null or undefined
            (0, common_1.assertParamExists)('storeControllerListStores', 'authorization', authorization);
            const localVarPath = `/stores`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }
            if (desc !== undefined) {
                localVarQueryParameter['desc'] = desc;
            }
            if (authorization != null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.StoresApiAxiosParamCreator = StoresApiAxiosParamCreator;
/**
 * StoresApi - functional programming interface
 * @export
 */
const StoresApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.StoresApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary create Store
         * @param {string} authorization JWT Token
         * @param {CreateStoreDto} createStoreDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeControllerCreateStore(authorization, createStoreDto, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeControllerCreateStore(authorization, createStoreDto, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = base_1.operationServerMap['StoresApi.storeControllerCreateStore']?.[index]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         *
         * @summary list Stores
         * @param {string} authorization JWT Token
         * @param {number} [limit]
         * @param {number} [page]
         * @param {string} [orderBy]
         * @param {boolean} [desc]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeControllerListStores(authorization, limit, page, orderBy, desc, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeControllerListStores(authorization, limit, page, orderBy, desc, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = base_1.operationServerMap['StoresApi.storeControllerListStores']?.[index]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    };
};
exports.StoresApiFp = StoresApiFp;
/**
 * StoresApi - factory interface
 * @export
 */
const StoresApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.StoresApiFp)(configuration);
    return {
        /**
         *
         * @summary create Store
         * @param {string} authorization JWT Token
         * @param {CreateStoreDto} createStoreDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerCreateStore(authorization, createStoreDto, options) {
            return localVarFp.storeControllerCreateStore(authorization, createStoreDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary list Stores
         * @param {string} authorization JWT Token
         * @param {number} [limit]
         * @param {number} [page]
         * @param {string} [orderBy]
         * @param {boolean} [desc]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerListStores(authorization, limit, page, orderBy, desc, options) {
            return localVarFp.storeControllerListStores(authorization, limit, page, orderBy, desc, options).then((request) => request(axios, basePath));
        },
    };
};
exports.StoresApiFactory = StoresApiFactory;
/**
 * StoresApi - object-oriented interface
 * @export
 * @class StoresApi
 * @extends {BaseAPI}
 */
class StoresApi extends base_1.BaseAPI {
    /**
     *
     * @summary create Store
     * @param {string} authorization JWT Token
     * @param {CreateStoreDto} createStoreDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoresApi
     */
    storeControllerCreateStore(authorization, createStoreDto, options) {
        return (0, exports.StoresApiFp)(this.configuration).storeControllerCreateStore(authorization, createStoreDto, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary list Stores
     * @param {string} authorization JWT Token
     * @param {number} [limit]
     * @param {number} [page]
     * @param {string} [orderBy]
     * @param {boolean} [desc]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoresApi
     */
    storeControllerListStores(authorization, limit, page, orderBy, desc, options) {
        return (0, exports.StoresApiFp)(this.configuration).storeControllerListStores(authorization, limit, page, orderBy, desc, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.StoresApi = StoresApi;
//# sourceMappingURL=api.js.map